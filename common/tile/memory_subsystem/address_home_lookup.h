#pragma once

#include <vector>
using namespace std;

#include "common_types.h"

/* 
 * TODO abstract MMU stuff to a configure file to allow
 * user to specify number of memory controllers, and
 * the address space that each is in charge of.  Default behavior:
 * AHL assumes that every tile has a memory controller,
 * and that each shares an equal number of address spaces.
 *
 * Each tile has an AHL, but they must keep their data consistent
 * regarding boundaries!
 *
 * Maybe allow the ability to have public and private memory space?
 */

class DramAddressHomeLookup
{
public:
   DramAddressHomeLookup(UInt32 dramahl_param, vector<tile_id_t>& dramtile_list, UInt32 dramcache_line_size);
   ~DramAddressHomeLookup();
   tile_id_t getDramHome(IntPtr address) const;//IntPtr  uintptr_t c++ 11 for storing pointers, address generated by pin
   string controller_partitioning_type;
   SInt32 drammodule_num_final;

private:
   UInt32 dram_ahl_param;
   vector<tile_id_t> dram_tile_list;
   UInt32 dram_total_modules;
   UInt32 dram_cache_line_size;


};

class AddressHomeLookup
{
public:
   AddressHomeLookup(UInt32 _ahl_param, vector<tile_id_t>& _tile_list, UInt32 _cache_line_size);
   ~AddressHomeLookup();
   tile_id_t getHome(IntPtr address) const;//IntPtr  uintptr_t c++ 11 for storing pointers, address generated by pin

   SInt32 module_num_final;
private:
   UInt32 _ahl_param;
   vector<tile_id_t> _tile_list;
   UInt32 _total_modules;
   UInt32 _cache_line_size;

};
